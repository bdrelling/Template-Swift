name: Swift Test

on:
  workflow_call:

jobs:
  prepare:
    uses: bdrelling/ci/.github/workflows/prepare.yml@main
  # TODO: Add a job here that builds the matrix for the next step, based on minimum_swift_version and platforms
  swift_test_apple:
    runs-on: ${{ matrix.inputs.runner }}
    needs: [prepare]
    strategy:
      fail-fast: false
      matrix:
        inputs:
          [
            {
              runner: macos-11,
              platform: macOS,
              build-method: swift,
              swift-version: 5.4,
            },
            {
              runner: macos-12,
              platform: macOS,
              build-method: swift,
              swift-version: 5.6,
            },
            {
              runner: macos-11,
              platform: macOS,
              build-method: xcodebuild,
              swift-version: 5.4,
            },
            {
              runner: macos-12,
              platform: macOS,
              build-method: xcodebuild,
              swift-version: 5.6,
            },
          ]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: ./.github/actions/swift-test
        with:
          scheme: MyModule
          platform: ${{ matrix.inputs.platform }}
          build-method: ${{ matrix.inputs.build-method }}
          swift-version: ${{ matrix.inputs.swift-version }}
  swift_test_linux:
    runs-on: ubuntu-latest
    container: swift:${{ matrix.swift-version }}-focal
    needs: [prepare]
    strategy:
      fail-fast: false
      matrix:
        swift-version: [5.4, 5.6]
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - uses: ./.github/actions/swift-test
        with:
          scheme: MyModule
          platform: Linux
          swift-version: ${{ matrix.swift-version }}
  troubleshooting:
    uses: ./.github/workflows/troubleshooting.yml
    needs: [swift_test_apple, swift_test_linux]
  # troubleshooting:
  #   runs-on: ubuntu-latest
  #   needs: [swift_test]
  #   if: always()
  #   steps:
  #     - name: machine echo github
  #       env: { CONTENT: '${{ toJSON(github) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo env
  #       env: { CONTENT: '${{ toJSON(env) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo job
  #       env: { CONTENT: '${{ toJSON(job) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo steps
  #       env: { CONTENT: '${{ toJSON(steps) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo runner
  #       env: { CONTENT: '${{ toJSON(runner) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo secrets
  #       env: { CONTENT: '${{ toJSON(secrets) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo strategy
  #       env: { CONTENT: '${{ toJSON(strategy) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo matrix
  #       env: { CONTENT: '${{ toJSON(matrix) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo needs
  #       run: echo '${{ toJSON(needs) }}'
  #     - name: machine echo inputs
  #       env: { CONTENT: '${{ toJSON(inputs) }}' }
  #       run: 'echo $CONTENT'
