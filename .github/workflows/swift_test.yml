name: Swift Test

on:
  workflow_call:

jobs:
  prepare:
    uses: bdrelling/ci/.github/workflows/prepare.yml@main
  # TODO: Add a job here that builds the matrix for the next step, based on minimum_swift_version and platforms
  # Example: https://michaelheap.com/dynamic-matrix-generation-github-actions/
  test_matrix:
    runs-on: ubuntu-latest
    needs: [prepare]
    steps:
      - id: test-matrix
        uses: ./.github/actions/swift-prepare
    outputs:
      version_matrix: ${{ steps.test-matrix.outputs.test-matrix }}
  example:
    runs-on: ubuntu-latest
    needs: [test_matrix]
    steps:
      - run: echo '${{ needs.test_matrix.outputs.version_matrix }}'
  # swift_test_apple:
  #   name: ${{ matrix.inputs.platform }} (Swift ${{ matrix.inputs.swift-version }})
  #   runs-on: ${{ matrix.inputs.runner }}
  #   needs: [example]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       inputs:
  #         [
  #           {
  #             runner: macos-11,
  #             platform: macOS,
  #             build-method: swift,
  #             swift-version: 5.4,
  #           },
  #           {
  #             runner: macos-12,
  #             platform: macOS,
  #             build-method: swift,
  #             swift-version: 5.6,
  #           },
  #           {
  #             runner: macos-11,
  #             platform: macOS,
  #             build-method: xcodebuild,
  #             swift-version: 5.4,
  #           },
  #           {
  #             runner: macos-12,
  #             platform: macOS,
  #             build-method: xcodebuild,
  #             swift-version: 5.6,
  #           },
  #         ]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - uses: ./.github/actions/swift-test
  #       with:
  #         scheme: MyModule
  #         platform: ${{ matrix.inputs.platform }}
  #         build-method: ${{ matrix.inputs.build-method }}
  #         swift-version: ${{ matrix.inputs.swift-version }}
  # swift_test_linux:
  #   name: Linux (Swift ${{ matrix.swift-version }})
  #   runs-on: ubuntu-latest
  #   container: swift:${{ matrix.swift-version }}-focal
  #   needs: [prepare]
  #   strategy:
  #     fail-fast: false
  #     matrix:
  #       swift-version: [5.4, 5.6]
  #   steps:
  #     - name: Checkout
  #       uses: actions/checkout@v2
  #     - uses: ./.github/actions/swift-test
  #       with:
  #         scheme: MyModule
  #         platform: Linux
  #         swift-version: ${{ matrix.swift-version }}
  send_notifications:
    runs-on: ubuntu-latest
    needs: [swift_test_apple, swift_test_linux]
    if: failure()
    steps:
      - name: Send Discord Notification
        uses: sarisia/actions-status-discord@v1
        with:
          webhook: ${{ secrets.DISCORD_CI_WEBHOOK }}
          title: Tests Failed
          status: Failure
          color: 0xff0000
  troubleshooting:
    uses: ./.github/workflows/troubleshooting.yml
    needs: [swift_test_apple, swift_test_linux]
    if: always()
  # troubleshooting:
  #   runs-on: ubuntu-latest
  #   needs: [swift_test]
  #   if: always()
  #   steps:
  #     - name: machine echo github
  #       env: { CONTENT: '${{ toJSON(github) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo env
  #       env: { CONTENT: '${{ toJSON(env) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo job
  #       env: { CONTENT: '${{ toJSON(job) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo steps
  #       env: { CONTENT: '${{ toJSON(steps) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo runner
  #       env: { CONTENT: '${{ toJSON(runner) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo secrets
  #       env: { CONTENT: '${{ toJSON(secrets) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo strategy
  #       env: { CONTENT: '${{ toJSON(strategy) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo matrix
  #       env: { CONTENT: '${{ toJSON(matrix) }}' }
  #       run: 'echo $CONTENT'
  #     - name: machine echo needs
  #       run: echo '${{ toJSON(needs) }}'
  #     - name: machine echo inputs
  #       env: { CONTENT: '${{ toJSON(inputs) }}' }
  #       run: 'echo $CONTENT'
